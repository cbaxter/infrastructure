//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spark.Cqrs.Eventing.Sagas.Sql.Dialects {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlServerDialectStatements {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlServerDialectStatements() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Spark.Cqrs.Eventing.Sagas.Sql.Dialects.SqlServerDialectStatements", typeof(SqlServerDialectStatements).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DELETE FROM [Saga] WHERE [Id] = @id AND [TypeId] = @typeId AND [Version] = @version;.
        /// </summary>
        internal static string DeleteSaga {
            get {
                return ResourceManager.GetString("DeleteSaga", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT * FROM sys.tables WHERE schema_id = SCHEMA_ID() AND name = &apos;Saga&apos; )
        ///BEGIN
        ///    CREATE TABLE [Saga] (
        ///        [Id]       UNIQUEIDENTIFIER NOT NULL,
        ///        [TypeId]   UNIQUEIDENTIFIER NOT NULL,
        ///        [Version]  INT              NOT NULL,
        ///        [Timeout]  DATETIME2        NULL,
        ///        [State]    VARBINARY(MAX)   NOT NULL
        ///     
        ///        CONSTRAINT [PK_Saga] PRIMARY KEY CLUSTERED ([Id],[TypeId]) WITH (IGNORE_DUP_KEY = ON)
        ///    );
        ///
        ///    CREATE NONCLUSTERED INDEX [IX_Saga_Timeou [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EnsureSagaTableExists {
            get {
                return ResourceManager.GetString("EnsureSagaTableExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT [Id],[TypeId],[Version],[Timeout],[State] FROM [Saga] WHERE [Id] = @id AND [TypeId] = @typeId;.
        /// </summary>
        internal static string GetSaga {
            get {
                return ResourceManager.GetString("GetSaga", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT [Id],[TypeId],[Version],[Timeout] FROM [Saga] WHERE [Timeout] &lt; @timeout.
        /// </summary>
        internal static string GetScheduledTimeouts {
            get {
                return ResourceManager.GetString("GetScheduledTimeouts", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [Saga] ([Id],[TypeId],[Version],[Timeout],[State]) VALUES(@id,@typeId,1,@timeout,@state);.
        /// </summary>
        internal static string InsertSaga {
            get {
                return ResourceManager.GetString("InsertSaga", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TRUNCATE TABLE [Saga];.
        /// </summary>
        internal static string PurgeSagas {
            get {
                return ResourceManager.GetString("PurgeSagas", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE [Saga] SET [Version] = @version + 1, [Timeout] = @timeout, [State] = @state WHERE [Id] = @id AND [TypeId] = @typeId AND [Version] = @version;.
        /// </summary>
        internal static string UpdateSaga {
            get {
                return ResourceManager.GetString("UpdateSaga", resourceCulture);
            }
        }
    }
}
