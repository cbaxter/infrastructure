//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Spark.EventStore.Sql.Dialects {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SqlServerDialectStatements {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SqlServerDialectStatements() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Spark.EventStore.Sql.Dialects.SqlServerDialectStatements", typeof(SqlServerDialectStatements).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to DELETE FROM [dbo].[Commit] WHERE [StreamId] = @streamId;.
        /// </summary>
        internal static string DeleteStream {
            get {
                return ResourceManager.GetString("DeleteStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT * FROM sys.tables WHERE schema_id = SCHEMA_ID() AND name = &apos;Commit&apos;)
        ///BEGIN
        ///    CREATE TABLE [Commit] (
        ///        [Id]            BIGINT           NOT NULL IDENTITY(1,1),
        ///        [Timestamp]     DATETIME2        NOT NULL,
        ///        [CorrelationId] UNIQUEIDENTIFIER NOT NULL,
        ///        [StreamId]      UNIQUEIDENTIFIER NOT NULL,
        ///        [Version]       INT              NOT NULL,
        ///        [Dispatched]    BIT              NOT NULL,
        ///        [Data]          VARBINARY(MAX)   NOT NULL,
        ///
        ///     [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string EnsureCommitTableExists {
            get {
                return ResourceManager.GetString("EnsureCommitTableExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(&apos;Commit&apos;) AND name = &apos;UQ_Commit_CorrelationId&apos;)
        ///BEGIN
        ///    CREATE UNIQUE INDEX [UQ_Commit_CorrelationId] ON [Commit]([CorrelationId]);
        ///END;.
        /// </summary>
        internal static string EnsureDuplicateCommitsDetected {
            get {
                return ResourceManager.GetString("EnsureDuplicateCommitsDetected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF EXISTS (SELECT * FROM sys.indexes WHERE object_id = OBJECT_ID(&apos;Commit&apos;) AND name = &apos;UQ_Commit_CorrelationId&apos;)
        ///BEGIN
        ///    DROP INDEX [UQ_Commit_CorrelationId] ON [Commit];
        ///END;.
        /// </summary>
        internal static string EnsureDuplicateCommitsSuppressed {
            get {
                return ResourceManager.GetString("EnsureDuplicateCommitsSuppressed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IF NOT EXISTS (SELECT * FROM sys.tables WHERE schema_id = SCHEMA_ID() AND name = &apos;Snapshot&apos; )
        ///BEGIN
        ///    CREATE TABLE [Snapshot] (
        ///        [StreamId]  UNIQUEIDENTIFIER NOT NULL,
        ///        [Version]   INT              NOT NULL,
        ///        [State]     VARBINARY(MAX)   NOT NULL,
        ///     
        ///        CONSTRAINT [PK_Snapshot] PRIMARY KEY CLUSTERED ([StreamId],[Version]) WITH (IGNORE_DUP_KEY = ON)
        ///    );
        ///END;.
        /// </summary>
        internal static string EnsureSnapshotTableExists {
            get {
                return ResourceManager.GetString("EnsureSnapshotTableExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP (@take) [Id],[Timestamp],[CorrelationId],[StreamId],[Version],[Data] FROM [dbo].[Commit] WHERE [Id] &gt;= @skip ORDER BY [Id];.
        /// </summary>
        internal static string GetRange {
            get {
                return ResourceManager.GetString("GetRange", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP(1) [StreamId],[Version],[State] FROM [dbo].[Snapshot] WHERE [StreamId] = @streamId AND [Version] &lt;= @version ORDER BY [Version] DESC;.
        /// </summary>
        internal static string GetSnapshot {
            get {
                return ResourceManager.GetString("GetSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP (@take) [Id],[Timestamp],[CorrelationId],[StreamId],[Version],[Data] FROM [dbo].[Commit] WHERE [StreamId] = @streamId AND [Version] &gt;= @version ORDER BY [Version];.
        /// </summary>
        internal static string GetStream {
            get {
                return ResourceManager.GetString("GetStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP (@take) [StreamId] FROM [dbo].[Commit] WHERE [Version] = 1 AND [StreamId] &gt; @streamId ORDER BY [StreamId];.
        /// </summary>
        internal static string GetStreams {
            get {
                return ResourceManager.GetString("GetStreams", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to SELECT TOP (@take) [Id],[Timestamp],[CorrelationId],[StreamId],[Version],[Data] FROM [dbo].[Commit] WHERE [Dispatched] = 0 AND [Id] &gt;= @skip ORDER BY [Id];.
        /// </summary>
        internal static string GetUndispatched {
            get {
                return ResourceManager.GetString("GetUndispatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [dbo].[Commit] ([Timestamp], [CorrelationId], [StreamId], [Version], [Dispatched], [Data]) OUTPUT Inserted.Id VALUES (@timestamp, @correlationId, @streamId, @version, 0, @data);.
        /// </summary>
        internal static string InsertCommit {
            get {
                return ResourceManager.GetString("InsertCommit", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to INSERT INTO [dbo].[Snapshot] ([StreamId],[Version],[State]) VALUES(@streamId, @version, @state);.
        /// </summary>
        internal static string InsertSnapshot {
            get {
                return ResourceManager.GetString("InsertSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE [Commit] SET [Dispatched] = 1 WHERE [Id] = @id;.
        /// </summary>
        internal static string MarkDispatched {
            get {
                return ResourceManager.GetString("MarkDispatched", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TRUNCATE TABLE [dbo].[Commit];.
        /// </summary>
        internal static string PurgeCommits {
            get {
                return ResourceManager.GetString("PurgeCommits", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to TRUNCATE TABLE [dbo].[Snapshot];.
        /// </summary>
        internal static string PurgeSnapshots {
            get {
                return ResourceManager.GetString("PurgeSnapshots", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE TOP(1) [dbo].[Snapshot] SET [Version] = @version, [State] = @state WHERE [StreamId] = @streamId;
        ///IF @@ROWCOUNT = 0
        ///BEGIN
        ///    INSERT INTO [dbo].[Snapshot] ([StreamId],[Version],[State]) VALUES(@streamId, @version, @state);
        ///END;.
        /// </summary>
        internal static string ReplaceSnapshot {
            get {
                return ResourceManager.GetString("ReplaceSnapshot", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UPDATE [dbo].[Commit] SET [Data] = @data WHERE [Id] = @id;.
        /// </summary>
        internal static string UpdateCommit {
            get {
                return ResourceManager.GetString("UpdateCommit", resourceCulture);
            }
        }
    }
}
